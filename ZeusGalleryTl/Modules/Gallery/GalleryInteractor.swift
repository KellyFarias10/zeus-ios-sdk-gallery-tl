//
//  GalleryInteractor.swift
//  zeus-ios-sdk-gallery-tl
//
//  Created DSI Soporte Tecnico on 27/01/25.
//  Copyright Â© 2025 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by UPAX Zeus
//

import UIKit
import UPAXNetworking

class GalleryInteractor: GalleryInteractorInputProtocol {
    var word: String = "perro"
    
    weak var presenter: GalleryInteractorOutputProtocol?
    var page: Int = 0
    var networking: Networking = TareasZeusV1NetworkManager.shared.networking
    
    func requestPrevious() {
        page -= 1
       makeRequest()
    }
    
    func requestNext() {
        
        page += 1
        makeRequest()
    }
    
    func search(word: String) {
        page = 1
        self.word = word
        makeRequest()
    }
    func makeRequest(){
        guard let url:URL =  url(for: "BaseUrl") ,
        let key:String = try? value(for: "AccessKey")
        else {return}
        let headers: HTTPHeaders = ["Authorization": "Client-ID \(key)"]
   
        let path = "\(url.absoluteURL)search/photos"
        networking.call(url: path,params:["query":word,"page":"\(page)"],headers: headers,encryptType: CrypType.none,responseType: ResponseType.none){[weak self] (_ response: Swift.Result<BaseResponse,NetError>) in
            switch response{
            case .success(let data):
                self?.presenter?.set(response: data)
            case .failure(let error):
                self?.presenter?.set(response: BaseResponse(total: 0, totalPages: 0, results: []))
                self?.presenter?.error(mesage: error.localizedDescription)
            }
        }
    }
    
     func value<T>(for key: String) throws -> T where T: LosslessStringConvertible {
        guard let object = Bundle.main.object(forInfoDictionaryKey:key) else {
            throw Error.missingKey
        }

        guard let value = object as? T else {
            throw Error.invalidValue
        }
        return value
    }
    
    enum Error: Swift.Error {
        case missingKey, invalidValue
    }
    func url(for key: String) -> URL? {
        let urlString: String? = try? value(for: key)
        return URL(string: urlString?.replacingOccurrences(of: "\\", with: "") ?? "")
    }
}
