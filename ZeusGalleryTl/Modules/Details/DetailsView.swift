//
//  DetailsView.swift
//  zeus-ios-sdk-gallery-tl
//
//  Created DSI Soporte Tecnico on 28/01/25.
//  Template generated by UPAX Zeus
//

import UIKit
import ZeusCoreDesignSystem

class DetailsView: UIView {
    // MARK: Child views
    
    let cardView:UIView={
        let view=UIView()
        view.translatesAutoresizingMaskIntoConstraints = false
        view.backgroundColor = .white
        view.layer.cornerRadius = 10
        return view
    }()
    
    let scroll:UIScrollView = {
        let scroll = UIScrollView()
        scroll.translatesAutoresizingMaskIntoConstraints = false
        return scroll
    }()
    
    let containerView :UIView = {
        let view = UIView()
        view.translatesAutoresizingMaskIntoConstraints = false
        return view
    }()
    
    let image = CardPhoto()
    
    let stackV : UIStackView = {
        let stack = UIStackView()
        stack.translatesAutoresizingMaskIntoConstraints = false
        stack.axis = .vertical
        stack.spacing = 20
        return stack
    }()
    
    var downloadButton:ZDSButton={
        var button = ZDSButton()
        button.primaryColor = .zeusPrimaryColor ?? .purple
        button.title = "Descargar"
        return button
        
    }()
    
    lazy var buttonView = downloadButton.asUIKitView()
    // MARK: Initializers
    init() {
        super.init(frame: .zero)
        backgroundColor = .backgroundTransparency
        addViews()
        setupConstraints()
    }
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    func setup(photo:Photo){
        image.setImage(url: photo.urls.full)
        image.set(likes: photo.likes)
        let data = [
            (photo.description ?? ""):"",
            " # Likes: ": "\(photo.likes)",
            "Creado por: ":photo.user.name,
            "Creado: ":formatDate(from: photo.createdAt) ?? "Sin Fecha",
        ]
        
        addLabels(data: data)
    }
    
    func addLabels(data:[String:String]){
        data.forEach({(key,value) in
            let labelTitle = UILabel()
            labelTitle.font = UIFont(style: .headline4())
            labelTitle.text = "\(key)"
            labelTitle.numberOfLines = 0
            
            let labelValue = UILabel()
            labelValue.font = UIFont(style: .bodyTextL())
            labelValue.text = "\(value)"
            
            let stackH = UIStackView(arrangedSubviews: [labelTitle])
            stackH.axis = .horizontal
            stackH.distribution = .fillEqually
            if !value.isEmpty{
                stackH.addArrangedSubview(labelValue)
            }
            stackV.addArrangedSubview(stackH)
        })
        
    }
    
    func formatDate(from dateString: String) -> String? {
        let inputFormatter = DateFormatter()
        inputFormatter.dateFormat = "yyyy-MM-dd'T'HH:mm:ssZ"
        inputFormatter.locale = Locale(identifier: "en_US_POSIX") // Asegura la correcta interpretaci√≥n del formato

        if let date = inputFormatter.date(from: dateString) {
            let outputFormatter = DateFormatter()
            outputFormatter.dateFormat = "dd-MM-yy"
            return outputFormatter.string(from: date)
        }
        return nil
    }
    
    
}
